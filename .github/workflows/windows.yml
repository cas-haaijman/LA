name: Build and Release

on:
  push:
    tags:
      - "v*.*.*" # Trigger only on version tags

env:
  COQREGTESTING: y

jobs:
  ###############################################################################
  # Builds Windows installer
  ###############################################################################
  build-windows-installer:
    name: Windows
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        architecture:
          - "64"
        coq-platform-pick:
          - "8.19~2024.10"
        vscoq-version:
          - "2.2.1"

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Git checkout install scripts
        uses: actions/checkout@v4
        with:
          path: main

      - name: Git checkout Coq platform
        uses: actions/checkout@v4
        with:
          repository: coq/platform
          path: platform

      - name: Set switch name in coq platform
        shell: cmd
        # We need to output without a (windows style new line here) else bash will complain AND we rely on the fact that the file has a trailing new line.
        run: |
          echo | set /p dummyName="COQ_PLATFORM_SWITCH_NAME=LnA" >> platform\package_picks\coq_platform_switch_name.sh
          type platform\package_picks\coq_platform_switch_name.sh

      - name: Set default install directory
        shell: cmd
        run: |
          sed -i 's/\s\sInstallDir\s"C:\\\${MY_PRODUCT}"/  InstallDir "C:\\\cygwin_LnA\\\home\\\runneradmin\\\.opam\\\LnA"/g' platform/windows/Coq.nsi
          cat platform/windows/Coq.nsi

      - name: Run coq platform make windows
        shell: cmd
        run: platform\coq_platform_make_windows.bat -destcyg=C:\cygwin_LnA -arch=${{matrix.architecture}} -extent=i -parallel=p -jobs=2 -vst=n -compcert=n -pick="${{matrix.coq-platform-pick}}" -set-switch=y

      - name: Patch installer
        shell: cmd
        run: |
          copy main\installer\* C:\cygwin_LnA\platform\
          C:\cygwin_LnA\bin\bash --login -c "/platform/patch_installer.sh"

      - name: Install vscoq-language-server
        shell: cmd
        run: |
          C:\cygwin_LnA\bin\bash --login -c "opam pin add -y vscoq-language-server.${{matrix.vscoq-version}}  https://github.com/coq-community/vscoq/releases/download/v${{matrix.vscoq-version}}/vscoq-language-server-${{matrix.vscoq-version}}.tar.gz"

      - name: Install LnA
        shell: cmd
        run: |
          mkdir C:\cygwin_LnA\home\runneradmin\LnA
          copy main\library\* C:\cygwin_LnA\home\runneradmin\LnA
          C:\cygwin_LnA\bin\bash --login -c "ls && opam pin add -y ./LnA"

      - name: Create installer
        shell: cmd
        run: |
          tree /f
          C:\cygwin_LnA\bin\bash --login -c "cd /platform && cat windows/create_installer_windows.sh && windows/create_installer_windows.sh && mkdir /cygdrive/c/installer && cp windows_installer/*exe /cygdrive/c/installer/"

      # - name: Sign the installer
      #   if: always()
      #   run: |
      #     New-Item -ItemType directory -Path certificate
      #     Set-Content -Path certificate\certificate.txt -Value '${{ secrets.CODE_SIGNING_CERTIFICATE }}'
      #     certutil -decode certificate\certificate.txt certificate\certificate.pfx
      #     & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe' sign /f certificate\certificate.pfx /p '${{ secrets.CODE_SIGNING_CERTIFICATE_PASS }}' C:\installer\*.exe
      #     Remove-Item -Path certificate\*

      - name: "Upload Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: "LnA-Windows-installer"
          path: C:\installer\*.exe

  ###############################################################################
  # Builds VS Code Extension
  ###############################################################################
  build-vsix:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Dependencies
        run: |
          cd extension
          npm install

      - name: Package `.vsix`
        run: |
          cd extension
          npx vsce package

      - name: Upload `.vsix` as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: vsix-artifact
          path: extension/*.vsix

  ###############################################################################
  # Builds the rocq library LnA
  ###############################################################################
  archive-library:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v5

      - name: Create library archive
        run: |
          cd library
          VERSION=${GITHUB_REF_NAME#v}
          git archive -o ../LnA-$VERSION.tar.gz --prefix="LnA-$VERSION/" $GITHUB_SHA .

      - name: Upload `.tar.gz` as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: library-archive
          path: ./LnA-*.tar.gz

  ###############################################################################
  # Collects all artifacts and puts them on the releases page
  ###############################################################################
  release:
    runs-on: ubuntu-latest
    needs: [build-windows-installer, build-vsix, archive-library] # Depends on other jobs
    steps:
      - name: Download Extension Artifact
        uses: actions/download-artifact@v4
        with:
          name: vsix-artifact
          path: ./release-assets

      - name: Download Installer Artifact
        uses: actions/download-artifact@v4
        with:
          name: vsix-artifact
          path: ./release-assets

      - name: Download Library Archive Artifact
        uses: actions/download-artifact@v4
        with:
          name: library-archive
          path: ./release-assets

      - name: Set Up GitHub CLI
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install GitHub CLI
        run: sudo apt-get install gh

      - name: Authenticate GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh auth login --with-token

      - name: Create GitHub Release
        env:
          TAG_NAME: ${{ github.ref_name }}
        run: |
          gh release create $TAG_NAME \
            ./release-assets/* \
            --title "Release $TAG_NAME" \
            --draft
